{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\n\nvar minBoundary = 1;\nvar maxBoundary = 100;\n\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n      onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n\n  function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < userNumber || direction === \"greater\" && currentGuess > userNumber) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [{\n        text: \"Sorry!\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponenet's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Higher or lower?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, \"lower\"),\n            children: \"-\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, \"greater\"),\n            children: \"+\"\n          })\n        })]\n      })]\n    })]\n  });\n}\n\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  },\n  instructionText: {\n    marginBottom: 12\n  },\n  buttonsContainer: {\n    flexDirection: \"row\"\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/home/henry/Programming/Zero_To_Mastery/FreeCodeCamp/ReactNative/MaxUdem/NumberGame/starting-project/screens/GameScreen.js"],"names":["useState","useEffect","NumberContainer","PrimaryButton","Title","Card","InstructionText","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","userNumber","onGameOver","initialGuess","currentGuess","setCurrentGuess","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","styles","screen","instructionText","buttonsContainer","buttonContainer","bind","StyleSheet","create","flex","padding","marginBottom","flexDirection"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, Alert } from \"react-native\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport Card from '../components/ui/Card'\nimport InstructionText from \"../components/ui/InstructionText\";\n\nfunction generateRandomBetween(min, max, exclude) {\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\n\nlet minBoundary = 1;\nlet maxBoundary = 100;\n\nfunction GameScreen({ userNumber, onGameOver }) {\n  const initialGuess = generateRandomBetween(\n    1,\n    100,\n    userNumber\n  );\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\n\n  useEffect(() => {\n      if (currentGuess === userNumber) {\n        onGameOver();\n      }\n  }, [currentGuess, userNumber, onGameOver])\n\n  function nextGuessHandler(direction) {\n    //direction => 'lower', 'greater'\n    if (\n      (direction === \"lower\" && currentGuess < userNumber) ||\n      (direction === \"greater\" && currentGuess > userNumber)\n    ) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [\n        { text: \"Sorry!\", style: \"cancel\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    const newRndNumber = generateRandomBetween(\n      minBoundary,\n      maxBoundary,\n      currentGuess\n    );\n    setCurrentGuess(newRndNumber);\n  }\n\n  return (\n    <View style={styles.screen}>\n      <Title>Opponenet's Guess</Title>\n      <NumberContainer>{currentGuess}</NumberContainer>\n      <Card>\n        <InstructionText style={styles.instructionText}>Higher or lower?</InstructionText>\n        <View style={styles.buttonsContainer}>\n            <View style={styles.buttonContainer}>\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"lower\")}>\n            -\n          </PrimaryButton>\n          </View>\n          <View style={styles.buttonContainer}>\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"greater\")}>\n            +\n          </PrimaryButton>\n          </View>\n        </View>\n\n        {/* + -  */}\n      </Card>\n      {/* <View>LOG ROUNDS</View> */}\n    </View>\n  );\n}\n\nexport default GameScreen;\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24,\n  },\n  instructionText: {\n      marginBottom: 12\n  },\n  buttonsContainer: {\n    flexDirection: \"row\",\n  },\n  buttonContainer: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}