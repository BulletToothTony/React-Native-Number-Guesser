{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/colors\";\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredNumber = _useState2[0],\n      setEnteredNumber = _useState2[1];\n\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n\n  function resetInputHandler() {\n    setEnteredNumber(\"\");\n  }\n\n  function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"Invalid number!\", \"Number has to be a number between 1 and 99.\", [{\n        text: \"Okay\",\n        style: \"destructive\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n\n    onPickNumber(chosenNumber);\n  }\n\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        children: \"Enter a Number\"\n      }), _jsx(TextInput, {\n        style: styles.numberInput,\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        onChangeText: numberInputHandler,\n        value: enteredNumber\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        })]\n      })]\n    })]\n  });\n}\n\nexport default StartGameScreen;\nvar deviceHeight = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: deviceHeight < 380 ? 300 : 100,\n    alignItems: \"center\"\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  buttonsContainer: {\n    flexDirection: \"row\"\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/home/henry/Programming/Zero_To_Mastery/FreeCodeCamp/ReactNative/MaxUdem/NumberGame/starting-project/screens/StartGameScreen.js"],"names":["useState","PrimaryButton","Colors","Title","Card","InstructionText","StartGameScreen","onPickNumber","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","styles","rootContainer","numberInput","buttonsContainer","buttonContainer","deviceHeight","Dimensions","get","height","StyleSheet","create","flex","marginTop","alignItems","width","fontSize","borderBottomColor","accent500","borderBottomWidth","color","marginVertical","fontWeight","textAlign","flexDirection"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { TextInput, View, StyleSheet, Alert, Dimensions } from \"react-native\";\n\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/colors\";\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\n\nfunction StartGameScreen({ onPickNumber }) {\n  const [enteredNumber, setEnteredNumber] = useState(\"\");\n\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n\n  function resetInputHandler() {\n    setEnteredNumber(\"\");\n  }\n\n  function confirmInputHandler() {\n    const chosenNumber = parseInt(enteredNumber);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\n        \"Invalid number!\",\n        \"Number has to be a number between 1 and 99.\",\n        [{ text: \"Okay\", style: \"destructive\", onPress: resetInputHandler }]\n      );\n      return;\n    }\n\n    onPickNumber(chosenNumber);\n  }\n\n  return (\n    <View style={styles.rootContainer}>\n      <Title>Guess My Number</Title>\n      <Card>\n        <InstructionText>Enter a Number</InstructionText>\n        <TextInput\n          style={styles.numberInput}\n          maxLength={2}\n          keyboardType=\"number-pad\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          onChangeText={numberInputHandler}\n          value={enteredNumber}\n        />\n        <View style={styles.buttonsContainer}>\n          <View style={styles.buttonContainer}>\n            <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\n          </View>\n          <View style={styles.buttonContainer}>\n            <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\n          </View>\n        </View>\n      </Card>\n    </View>\n  );\n}\n\nexport default StartGameScreen;\n\nconst deviceHeight = Dimensions.get('window').height\n\nconst styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop:     deviceHeight < 380 ? 300 : 100,\n    alignItems: \"center\",\n  },\n\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  buttonsContainer: {\n    flexDirection: \"row\",\n  },\n  buttonContainer: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}