{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport GuessLogItem from \"../components/game/GuessLogItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\n\nvar minBoundary = 1;\nvar maxBoundary = 100;\n\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n      onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState([initialGuess]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      guessRounds = _useState4[0],\n      setGuessRounds = _useState4[1];\n\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n  useEffect(function () {\n    minBoundary = 1;\n    maxBoundary = 100;\n  }, []);\n\n  function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < userNumber || direction === \"greater\" && currentGuess > userNumber) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [{\n        text: \"Sorry!\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n    setGuessRounds(function (prevGuessRounds) {\n      return [newRndNumber].concat(_toConsumableArray(prevGuessRounds));\n    });\n  }\n\n  var guessRoundsListLength = guessRounds.length;\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponenet's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Higher or lower?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, \"lower\"),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, \"greater\"),\n            children: _jsx(Ionicons, {\n              name: \"md-add\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        })]\n      })]\n    }), _jsx(View, {\n      children: _jsx(FlatList, {\n        data: guessRounds,\n        renderItem: function renderItem(itemData) {\n          return _jsx(GuessLogItem, {\n            roundNumber: guessRoundsListLength - itemData.index,\n            guess: itemData.item\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item;\n        }\n      })\n    })]\n  });\n}\n\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  },\n  instructionText: {\n    marginBottom: 12\n  },\n  buttonsContainer: {\n    flexDirection: \"row\"\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/home/henry/Programming/Zero_To_Mastery/FreeCodeCamp/ReactNative/MaxUdem/NumberGame/starting-project/screens/GameScreen.js"],"names":["useState","useEffect","Ionicons","NumberContainer","PrimaryButton","Title","Card","InstructionText","GuessLogItem","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","userNumber","onGameOver","initialGuess","currentGuess","setCurrentGuess","guessRounds","setGuessRounds","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","prevGuessRounds","guessRoundsListLength","length","styles","screen","instructionText","buttonsContainer","buttonContainer","bind","itemData","index","item","StyleSheet","create","flex","padding","marginBottom","flexDirection"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, Alert, FlatList } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport GuessLogItem from \"../components/game/GuessLogItem\";\n\nfunction generateRandomBetween(min, max, exclude) {\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\n\nlet minBoundary = 1;\nlet maxBoundary = 100;\n\nfunction GameScreen({ userNumber, onGameOver }) {\n  const initialGuess = generateRandomBetween(1, 100, userNumber);\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\n  const [guessRounds, setGuessRounds] = useState([initialGuess]);\n\n  useEffect(() => {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n\n  useEffect(() => {\n    minBoundary = 1;\n    maxBoundary = 100;\n  }, []);\n\n  function nextGuessHandler(direction) {\n    //direction => 'lower', 'greater'\n    if (\n      (direction === \"lower\" && currentGuess < userNumber) ||\n      (direction === \"greater\" && currentGuess > userNumber)\n    ) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [\n        { text: \"Sorry!\", style: \"cancel\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    const newRndNumber = generateRandomBetween(\n      minBoundary,\n      maxBoundary,\n      currentGuess\n    );\n    setCurrentGuess(newRndNumber);\n    setGuessRounds((prevGuessRounds) => [newRndNumber, ...prevGuessRounds]);\n  }\n\n  const guessRoundsListLength = guessRounds.length;\n\n  return (\n    <View style={styles.screen}>\n      <Title>Opponenet's Guess</Title>\n      <NumberContainer>{currentGuess}</NumberContainer>\n      <Card>\n        <InstructionText style={styles.instructionText}>\n          Higher or lower?\n        </InstructionText>\n        <View style={styles.buttonsContainer}>\n          <View style={styles.buttonContainer}>\n            <PrimaryButton onPress={nextGuessHandler.bind(this, \"lower\")}>\n              <Ionicons name=\"md-remove\" size={24} color=\"white\" />\n            </PrimaryButton>\n          </View>\n          <View style={styles.buttonContainer}>\n            <PrimaryButton onPress={nextGuessHandler.bind(this, \"greater\")}>\n              <Ionicons name=\"md-add\" size={24} color=\"white\" />\n            </PrimaryButton>\n          </View>\n        </View>\n\n        {/* + -  */}\n      </Card>\n      <View>\n        {/* {guessRounds.map((guessRound) => {\n              return (\n              <Text key={guessRound}>{guessRound}</Text>\n              )\n          })} */}\n        <FlatList\n          data={guessRounds}\n          renderItem={(itemData) => (\n            <GuessLogItem\n              roundNumber={guessRoundsListLength - itemData.index}\n              guess={itemData.item}\n            />\n          )}\n          keyExtractor={(item) => item}\n        />\n      </View>\n    </View>\n  );\n}\n\nexport default GameScreen;\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24,\n  },\n  instructionText: {\n    marginBottom: 12,\n  },\n  buttonsContainer: {\n    flexDirection: \"row\",\n  },\n  buttonContainer: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}